{"/_app":{"title":" App","data":{"":""}},"/bridge":{"title":"Bridge","data":{"":"","currently-supported#Currently Supported":"ESX\tQBCore\tQBox\tvRP\tNDCore\tDatabase\t\t\t\t\t\toxmysql\t\t\t\tInventory\t\t\t\t\t\tqb-inventory\t\t\tlj-inventory\t\t\taj-inventory\t\t\tax-inventory\t\t\tps-inventory\t\t\tox-inventory\t\t\t\tqs-inventory\t\t\t\tTarget\t\t\t\t\t\tox_target\t\t\t\tqb-target\t\t\t\tqtarget\t\t\t\tmeta_target\t\t\t\tZone\t\t\t\t\t\t\t\tox_lib\t\t\t\tPolyZone","bridge-settings-optional#Bridge Settings (Optional)":"The bridge auto detects all components incase you use a renamed database/framework/inventory/target/zone you can change the names using the following convars\n-- Turn On Debug Mode\nsetr bridge:debug \"true\"\n\n-- Change Language\nsetr bridge:locale \"en\"\n\n-- Override Database\nsetr bridge:database \"oxmysql\"\n\n-- Override Database Resource Name (Used For Export)\nsetr bridge:databasename \"oxmysql\"\n\n-- Override Framework\nsetr bridge:framework \"esx\"\n\n-- Override Framework Resource Name (Used For Export)\nsetr bridge:frameworkname \"es_extended\"\n\n-- Override Framework Resource Name (Used For Event)\nsetr bridge:frameworkevent \"esx:getSharedObject\"\n\n-- Override Framework Prefix\nsetr bridge:frameworkprefix \"esx\"\n\n-- Override Inventory\nsetr bridge:inventory \"ox_inventory\"\n\n-- Override Inventory Resource Name (Used For Export)\nsetr bridge:inventoryname \"ox_inventory\"\n\n-- Override Inventory Image Path\nsetr bridge:inventoryimagepath \"ox_inventory/web/images/\"\n\n-- Override Target\nsetr bridge:target \"ox_target\"\n\n-- Override Target Name (Used For Export)\nsetr bridge:targetname \"ox_target\"\n\n-- Override Zone\nsetr bridge:zone \"ox_lib\"\n\n-- Override Zone Name (Used For Export)\nsetr bridge:zonename \"ox_lib\""}},"/bridge/core":{"title":"Bridge Core","data":{"":"","version#Version":"Bridge Current Version\nBridge.Version","resource#Resource":"Current Resource Name\nBridge.Resource","context#Context":"Current Context Server Or Client\nBridge.Context","debugmode#DebugMode":"Is Bridge In DebugMode\nBridge.DebugMode","locale#Locale":"Locale Currently Used default en\nBridge.Locale","framework#Framework":"Current Framework\nBridge.Framework","frameworkname#FrameworkName":"Current Framework Name Used For Exports\nBridge.FrameworkName","frameworkevent#FrameworkEvent":"Current Framework Event Used For Events\nBridge.FrameworkEvent","inventory#Inventory":"Current Inventory\nBridge.Inventory","inventoryname#InventoryName":"Current Inventory Name Used For Exports\nBridge.InventoryName","inventoryimagepath#InventoryImagePath":"Current Inventory Image Path\nBridge.InventoryImagePath","target#Target":"Current Target\nBridge.Target","targetname#TargetName":"Current Target Name Used For Exports\nBridge.TargetName","zone#Zone":"Current Zone\nBridge.Zone","zonename#ZoneName":"Current Zone Name Used For Exports\nBridge.ZoneName","database#Database":"Current Database\nBridge.Database","databasename#DatabaseName":"Current Database Name Used For Exports\nBridge.DatabaseName"}},"/bridge/database/insert":{"title":"Insert","data":{"":"Insert new row into table\nDatabase.insert(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: number\n\n\nlocal id = Database.insert('INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' })\n\nprint(id)\n\n\n\nDatabase.insert('INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' }, function(id)\nprint(id)\nend)"}},"/bridge/database/prepare":{"title":"Prepare","data":{"":"Prepare query for optimizing performance and frequently called queries\nDatabase.prepare(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: table\n\n\nlocal result = Database.prepare('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ?', { 'value1' })\n\nprint(json.encode(result))\n\n\n\nDatabase.prepare('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ?', { 'value1' }, function(result)\nprint(json.encode(result))\nend)"}},"/bridge/database/query":{"title":"Query","data":{"":"Returns all\nDatabase.query(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: any\n\n\nlocal result = Database.query('SELECT * FROM `table` WHERE `column3` = ?', { 'value1' })\n\nprint(json.encode(result))\n\n\n\nDatabase.query('SELECT * FROM `table` WHERE `column3` = ?', { 'value1' }, function(result)\nprint(json.encode(result))\nend)"}},"/bridge/database/scalar":{"title":"Scalar","data":{"":"Returns the first column for a single row\nDatabase.scalar(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: any\n\n\nlocal column1 = Database.scalar('SELECT `column1` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' })\n\nprint(column1)\n\n\n\nDatabase.scalar('SELECT `column1` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' }, function(columm1)\nprint(column1)\nend)"}},"/bridge/database/single":{"title":"Single","data":{"":"Returns all selected columns for a single row\nDatabase.single(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: table\n\n\nlocal result = Database.single('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' })\n\nprint(result.column1, result.column2)\n\n\n\nDatabase.single('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' }, function(result)\nprint(result.column1, result.column2)\nend)"}},"/bridge/database/transaction":{"title":"Transaction","data":{"":"Transaction executes multiple queries and commits them only if all succeed\nDatabase.transaction(query, data, cb)\n\nquery: table\ncb?: function(result)\n\nreturns: boolean\n\n\nlocal queries = {\n{ 'INSERT INTO `table` (column1) VALUES (?)', { 'value1' } },\n{ 'INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' } },\n}\n\nlocal result = Database.transaction(queries)\n\nprint(result)\n\n\n\nlocal queries = {\n{ 'INSERT INTO `table` (column1) VALUES (?)', { 'value1' } },\n{ 'INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' } },\n}\n\nDatabase.transaction(queries, function(result)\nprint(result)\nend)"}},"/bridge/database/update":{"title":"Update","data":{"":"Returns the number of rows affected by the query\nDatabase.update(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: number\n\n\nlocal result = Database.update('UPDATE `table` SET `column1` = ? WHERE `column2` = ?' , { 'value1', 'value2' })\n\nprint(result)\n\n\n\nDatabase.update('UPDATE `table` SET `column1` = ? WHERE `column2` = ?' , { 'value1', 'value2' }, function(result)\nprint(result)\nend)"}},"/bridge/framework/client":{"title":"Framework Client","data":{"":"","onplayerloaded#OnPlayerLoaded":"Function gets called when the player loads into the server\nFramework.OnPlayerLoaded = function()\n-- Player Loaded Into The Server\nend","onplayerunload#OnPlayerUnload":"Function gets called when the player leaves the server\nFramework.OnPlayerUnload = function()\n-- Player Left The Server\nend","onjobupdate#OnJobUpdate":"Function gets called when the players job changes\nFramework.OnJobUpdate = function()\n-- Player Job Changed\nend","onjobdutyupdate#OnJobDutyUpdate":"Function gets called when the players job duty changes\nFramework.OnJobDutyUpdate = function()\n-- Player Job Duty Changed\nend","ongangupdate#OnGangUpdate":"Function gets called when the players gang changes\nFramework.OnGangUpdate = function()\n-- Player Gang Changed\nend","onplayerdataupdate#OnPlayerDataUpdate":"Function gets called when the players data updates\nFramework.OnPlayerDataUpdate = function()\n-- Player Data Changed\nend","player#Player":"Framework.Player\nreturns: Player\nlocal player = Framework.Player\nprint(player.Firstname, player.Lastname)","createcallback#CreateCallback":"Function Creates Client Callback.\nFramework.CreateCallback(name, cb)\n\nname: string\ncb: function(cb, ...)\n\n\nFramework.CreateCallback('clientcallbackname', function(cb, value1, value2)\ncb(value1, value2)\nend)","triggercallback#TriggerCallback":"Function Triggers Server Callback\nFramework.TriggerCallback(name, cb, ...)\n\nname: string\ncb: function(...)\n\n\nFramework.TriggerCallback('servercallbackname', function(result1, result2)\nprint(result1, result2)\nend, value1, value2)","spawnvehicle#SpawnVehicle":"Function Spawns Vehicle\nFramework.SpawnVehicle(cb, model, coords, warp)\n\ncb: function(netid)\nmodel number | string\ncoords? vector3 | vector4\nwarp? boolean\n\n\nFramework.SpawnVehicle(function(netid)\nlocal vehicle = NetToVeh(netid)\nSetVehicleNumberPlateText(vehicle, 'MYPLATE')\nend, 'dominator')","toggleduty#ToggleDuty":"Toggle Job Duty\nFramework.ToggleDuty()","notify#Notify":"Show Notification Message\nFramework.Notify(message, type, length)\n\nmessage: string\ntype info | success | error\nlength number\n\n\nFramework.Notify('My Notification Message', 'info', 5000)","isplayerdead#IsPlayerDead":"Check If Player Is Dead\nFramework.IsPlayerDead()\nreturns: boolean","getstatus#GetStatus":"Get Player Status\nFramework.GetStatus(key)\n\nkey: string\n\nreturns: number\nFramework.GetStatus('hunger')","opensociety#OpenSociety":"Open Society Menu\nFramework.OpenSociety(name, type)\n\nname: string\ntype: 'job' | 'gang'\n\nreturns: number\nFramework.OpenSociety('police', 'job')"}},"/bridge/framework/locale":{"title":"Framework Locale","data":{"":"Language files are automatically loaded from the locales folder, the default language is en","change-the-language#Change The Language":"Add the following convar to your server.cfg to change the preferred language\nsetr bridge:locale en","loading-languages#Loading Languages":"Add the following to your fxmanifest to load all locales\nfiles {\n'bridge/**/**/client.lua',\n'bridge/**/*.lua',\n'locales/*.json'\n}","create-locale#Create Locale":"{\n\"myname\": \"My Name Is {name}\",\n}\nGetting Specific Locale String\nFramework.Locale('myname', {  name = 'Sloppy' })\nReturns\nMy Name Is Sloppy","locale#Locale":"Get Specific Language String\nFramework.Locale(key, params)\n\nkey: string\nparams: table\n\n\nFramework.Locale('mykey', {  myvalue = 'My Value' })\nreturns: string","locales#Locales":"Get Language Table\nFramework.Locales()\nreturns: table"}},"/bridge/framework/player":{"title":"Framework Player","data":{"":"","source#source":"Player sourcereturns: number\n\n\nlocal player = Framework.GetPlayer(source)\nprint(player.source)","identifier#Identifier":"Player identifierreturns: string\n\n\nFramework.Player.Identifier\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Identifier","name#Name":"Player namereturns: string\n\n\nFramework.Player.Name\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Name","firstname#Firstname":"Player firstnamereturns: string\n\n\nFramework.Player.Firstname\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Firstname","lastname#Lastname":"Player lastnamereturns: string\n\n\nFramework.Player.Lastname\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Lastname","date-of-birth#Date Of Birth":"Player Date Of Birthreturns: string\n\n\nFramework.Player.DateOfBirth\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.DateOfBirth","gender#Gender":"Player Genderreturns: string\n\n\nFramework.Player.Gender\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Gender","job#Job":"Player jobreturns: table\nName: string\nLabel: string\nDuty: boolean\nBoss: boolean\nGrade: table\nName: string\nLevel: number\n\n\n\n\n\n\nFramework.Player.Job\n-- returns: {\"Boss\":false,\"Duty\":false,\"Grade\":{\"Level\":1,\"Name\":\"Officer\"},\"Label\":\"Law Enforcement\",\"Name\":\"police\"}\n\nFramework.Player.Job.Name\n-- returns: police\n\nFramework.Player.Job.Label\n-- returns: Law Enforcement\n\nFramework.Player.Job.Duty\n-- returns: false\n\nFramework.Player.Job.Boss\n-- returns: false\n\nFramework.Player.Job.Grade\n-- returns: {\"Level\":1,\"Name\":\"Officer\"}\n\nFramework.Player.Job.Grade.Name\n-- returns: Officer\n\nFramework.Player.Job.Grade.Level\n-- returns: 1\n\n\n\nlocal player = Framework.GetPlayer(source)\n\nplayer.Job\n-- returns: {\"Boss\":false,\"Duty\":false,\"Grade\":{\"Level\":1,\"Name\":\"Officer\"},\"Label\":\"Law Enforcement\",\"Name\":\"police\"}\n\nplayer.Job.Name\n-- returns: police\n\nplayer.Job.Label\n-- returns: Law Enforcement\n\nplayer.Job.Duty\n-- returns: false\n\nplayer.Job.Boss\n-- returns: false\n\nplayer.Job.Grade\n-- returns: {\"Level\":1,\"Name\":\"Officer\"}\n\nplayer.Job.Grade.Name\n-- returns: Officer\n\nplayer.Job.Grade.Level\n-- returns: 1","gang#Gang":"Player gangreturns: table\nName: string\nLabel: string\nBoss: boolean\nGrade: table\nName: string\nLevel: number\n\n\n\n\n\n\nFramework.Player.Gang\n-- returns: {\"Boss\":false,\"Grade\":{\"Level\":1,\"Name\":\"Enforcer\"},\"Label\":\"My Gang Name\",\"Name\":\"mygang\"}\n\nFramework.Player.Gang.Name\n-- returns: mygang\n\nFramework.Player.Gang.Label\n-- returns: My Gang Name\n\nFramework.Player.Gang.Boss\n-- returns: false\n\nFramework.Player.Gang.Grade\n-- returns: {\"Level\":1,\"Name\":\"Enforcer\"}\n\nFramework.Player.Gang.Grade.Name\n-- returns: Enforcer\n\nFramework.Player.Gang.Grade.Level\n-- returns: 1\n\n\n\nlocal player = Framework.GetPlayer(source)\n\nplayer.Gang\n-- returns: {\"Boss\":false,\"Grade\":{\"Level\":1,\"Name\":\"Enforcer\"},\"Label\":\"My Gang Name\",\"Name\":\"mygang\"}\n\nplayer.Gang.Name\n-- returns: mygang\n\nplayer.Gang.Label\n-- returns: My Gang Name\n\nplayer.Gang.Boss\n-- returns: false\n\nplayer.Gang.Grade\n-- returns: {\"Level\":1,\"Name\":\"Enforcer\"}\n\nplayer.Gang.Grade.Name\n-- returns: Enforcer\n\nplayer.Gang.Grade.Level\n-- returns: 1","metadata#Metadata":"Player Metadatareturns: table\n\n\nFramework.Player.Metadata\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Metadata","setjob#SetJob":"Set Player job\nPlayer.SetJob(job, grade)\n\njob: string\ngrade number | string\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.SetJob('police', 0)","setgang#SetGang":"Set Player gang\nPlayer.SetGang(gang, grade)\n\ngang: string\ngrade number | string\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.SetGang('mygang', 0)","hasjob#HasJob":"Check if player has job and or grade\nFramework.HasJob(job, player)\n\njob: string | table\nplayer: Player\n\nreturns: boolean\nFramework.HasJob('police', Framework.Player)\n\nFramework.HasJob({ ['police'] = 1 }, Framework.Player)","hasgang#HasGang":"Check if player has gang and or grade\nFramework.HasGang(gang, player)\n\ngang: string | table\nplayer: Player\n\nreturns: boolean\nFramework.HasGang('mygang', Framework.Player)\n\nFramework.HasGang({ ['mygang'] = 1 }, Framework.Player)","addmoney#AddMoney":"Add Player Money\nPlayer.AddMoney(type, amount)\n\ntype: cash | bank | other\namount number\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.AddMoney('cash', 100)","removemoney#RemoveMoney":"Remove Player Money\nPlayer.RemoveMoney(type, amount)\n\ntype: cash | bank | other\namount number\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.RemoveMoney('cash', 100)","getmoney#GetMoney":"Get Player Money\nPlayer.GetMoney(type)\n\ntype: cash | bank | other\n\nreturns: number\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.GetMoney('cash')","accounts#Accounts":"Gets Player Account Balance\nPlayer.Accounts[name]\n\nname: string\n\nreturns: number\n\n\n-- Cash\nFramework.Player.Accounts['cash']\n\n-- Bank\nFramework.Player.Accounts['bank']\n\n-- Other\nFramework.Player.Accounts['crypto']","getstatus#GetStatus":"Get Player Status\nPlayer.GetStatus(key)\n\nkey: string\n\nreturns: number\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.GetStatus('hunger')","setstatus#SetStatus":"Set Player Status\nPlayer.SetStatus(key, value)\n\nkey: string\nvalue: number\n\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.SetStatus('hunger', 100)","getmetadata#GetMetaData":"Get Player Metadata\nPlayer.GetMetaData(key)\n\nkey?: string\n\n\n\n\nlocal player = Framework.GetPlayer(source)\n\n-- Get All Metadata\nplayer.GetMetaData()\n\n-- Get Specific Metadata key\nplayer.GetMetaData('mykey')","setmetadata#SetMetaData":"Set Player Metadata\nPlayer.SetMetaData(key, value)\n\nkey: string\nvalue: any\n\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.SetMetaData('mykey', 'myvalue')","haslicense#HasLicense":"Check If Player Has License\nPlayer.HasLicense(name)\n\nname: string\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.HasLicense('driver')","getlicenses#GetLicenses":"Get Player Licenses\nPlayer.GetLicenses()\nreturns: table<string, boolean>\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.GetLicenses()","addlicense#AddLicense":"Add License To Player\nPlayer.AddLicense(name)\n\nname: string\n\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.AddLicense('driver')","removelicense#RemoveLicense":"Remove License From Player\nPlayer.RemoveLicense(name)\n\nname: string\n\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.RemoveLicense('driver')"}},"/bridge/framework/server":{"title":"Framework Server","data":{"":"","onplayerloaded#OnPlayerLoaded":"Function gets called when the player loads into the server\nFramework.OnPlayerLoaded = function(source)\n-- Player Loaded Into The Server\nend\n\nsource: number","onplayerunload#OnPlayerUnload":"Function gets called when the player leaves the server\nFramework.OnPlayerUnload = function(source)\n-- Player Left The Server\nend\n\nsource: number","onjobupdate#OnJobUpdate":"Function gets called when the players job changes\nFramework.OnJobUpdate = function(source)\n-- Player Job Changed\nend\n\nsource: number","onjobdutyupdate#OnJobDutyUpdate":"Function gets called when the players job duty changes\nFramework.OnJobDutyUpdate = function(source)\n-- Player Job Duty Changed\nend\n\nsource: number","ongangupdate#OnGangUpdate":"Function gets called when the players gang changes\nFramework.OnGangUpdate = function(source)\n-- Player Gang Changed\nend\n\nsource: number","onplayerdataupdate#OnPlayerDataUpdate":"Function gets called when the players data updates\nFramework.OnPlayerDataUpdate = function(source)\n-- Player Data Changed\nend\n\nsource: number","createcallback#CreateCallback":"Function Creates Server Callback.\nFramework.CreateCallback(name, cb)\n\nname: string\ncb: function(source cb, ...)\n\n\nFramework.CreateCallback('servercallbackname', function(source, cb, value1, value2)\ncb(value1, value2)\nend)","triggercallback#TriggerCallback":"Function Triggers Client Callback\nFramework.TriggerCallback(source, name, cb, ...)\n\nsource: number\nname: string\ncb: function(...)\n\n\nFramework.TriggerCallback(source, 'clientcallbackname', function(result1, result2)\nprint(result1, result2)\nend, value1, value2)","createuseableitem#CreateUseableItem":"Framework.CreateUseableItem(name, cb)\n\nname: string\ncb: function(source, item, data)\nsource: number\nitem: string\ndata: table\nweight: number\ncount: number\nslot: number\nname: string\nmetadata: table\nlabel: string\n\n\n\n\n\n\nFramework.CreateUseableItem('itemname', function(source, item, data)\n-- Item Is Useable\nend)","getplayer#GetPlayer":"Framework.GetPlayer(source)\n\nsource: number\n\nreturns: Player | nil","getplayerbyidentifier#GetPlayerByIdentifier":"Framework.GetPlayerByIdentifier(identifier)\n\nidentifier: string\n\nreturns: Player | nil\nFramework.GetPlayer(source)","doesjobexist#DoesJobExist":"Framework.DoesJobExist(job, grade)\n\njob: string\ngrade: string | number\n\nreturns: boolean\nFramework.DoesJobExist('jobname', 0)","doesgangexist#DoesGangExist":"Framework.DoesGangExist(gang, grade)\n\ngang: string\ngrade: string | number\n\nreturns: boolean\nFramework.DoesGangExist('gangname', 0)","registersociety#RegisterSociety":"Framework.RegisterSociety(name, type)\n\nname: string\ntype: 'job' | 'gang'\n\n\nFramework.RegisterSociety('police', 'job')","societygetmoney#SocietyGetMoney":"Framework.SocietyGetMoney(name, type)\n\nname: string\ntype: 'job' | 'gang'\n\nreturns: number\nFramework.SocietyGetMoney('police', 'job')","societyaddmoney#SocietyAddMoney":"Framework.SocietyAddMoney(name, type, amount)\n\nname: string\ntype: 'job' | 'gang'\namount: number\n\nreturns: boolean\nFramework.SocietyAddMoney('police', 'job', 100)","societyremovemoney#SocietyRemoveMoney":"Framework.SocietyRemoveMoney(name, type, amount)\n\nname: string\ntype: 'job' | 'gang'\namount: number\n\nreturns: boolean\nFramework.SocietyRemoveMoney('police', 'job', 100)","notify#Notify":"Show Notification Message\nFramework.Notify(source, message, type, length)\n\nsource number\nmessage: string\ntype info | success | error\nlength number\n\n\nFramework.Notify(source, 'My Notification Message', 'info', 5000)","isplayerdead#IsPlayerDead":"Check If Player Is Dead\nFramework.IsPlayerDead(source)\n\nsource number\n\nreturns: boolean"}},"/bridge/installation":{"title":"Installation","data":{"":"","installing-the-bridge#Installing The Bridge":"For Developers Only\nTo be able to load the bridge you need to add the following to your fxmanifest.lua\nlua54 'yes'\nuse_experimental_fxv2_oal 'yes'\n\nshared_scripts {\n'bridge/bridge.lua',\n}\n\nfiles {\n'bridge/**/**/client.lua',\n'bridge/**/*.lua',\n}"}},"/bridge/inventory/client":{"title":"Inventory Client","data":{"":"","items#Items":"Framework.Items\nreturns: Item[]","openstash#OpenStash":"Opens stash registered using RegisterStash\nFramework.OpenStash(name)\n\nname: string\n\n\nFramework.OpenStash('mystash')","openshop#OpenShop":"Open named shop registered using RegisterShop\nFramework.OpenShop(name)\n\nname: string\n\n\nFramework.OpenShop('myshop')","hasitem#HasItem":"Check if a player has an item or items\nFramework.HasItem(items, count, metadata)\n\nitems: string | string[] | table<string, number>\ncount?: number\nmetadata?: table\n\nreturns: booleanChecking a single item\nFramework.HasItem('water_bottle', 1)\nChecking a single item with metadata\nFramework.HasItem('water_bottle', 1, { quality = 100 })\nChecking multiple items\nFramework.HasItem({'water_bottle', 'burger' }, 1)\nChecking multiple items with different quantity\nFramework.HasItem({['water_bottle'] = 1, ['burger'] = 2})","lockinventory#LockInventory":"Locks Inventory\nFramework.LockInventory()","unlockinventory#UnlockInventory":"Unlocks Inventory\nFramework.UnlockInventory()"}},"/bridge/inventory/item":{"title":"Inventory Item","data":{"":"name string\nlabel string\nweight number\nslot number\ncount number\ntype string\nmetadata table\nimage string\ndescription string\nstack boolean\nclose boolean"}},"/bridge/inventory/server":{"title":"Inventory Server","data":{"":"","items#Items":"Framework.Items\nreturns: Item[]","additem#AddItem":"Add Item To Inventory\nFramework.AddItem(inventory, item, count, metadata, slot)\n\ninventory: number | string\nitem: string\ncount: number\nmetadata?: table\nslot?: number\n\nreturns: booleanAdd item to inventory\n-- To Player\nFramework.AddItem(source, 'water_bottle', 1, { quality = 100 })\n\n-- To Stash\nFramework.AddItem('mystash', 'water_bottle', 1, { quality = 100 })","removeitem#RemoveItem":"Remove Item From Inventory\nFramework.RemoveItem(inventory, item, count, metadata, slot)\n\ninventory: number | string\nitem: string\ncount: number\nmetadata?: table\nslot?: number\n\nreturns: booleanRemove item from inventory\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1)\n\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1)\nRemove item from inventory where metadata matches\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1, { quality = 50 })\n\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1, { quality = 50 })\nRemove item from inventory from specific slot\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1, nil, 1)\n\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1, nil, 1)","getitem#GetItem":"Get Item From Inventory\nFramework.GetItem(inventory, item, metadata)\n\ninventory: number | string\nitem: string\nmetadata?: table\n\nreturns: Item[]\n-- Get Item From Player Inventory\nFramework.GetItem(source, 'water_bottle')\n\n-- Get Item From Stash\nFramework.GetItem('mystash', 'water_bottle')","getitemcount#GetItemCount":"Get Item Count From Inventory\nFramework.GetItemCount(inventory, item, metadata)\n\ninventory: number | string\nitem: string\nmetadata?: table\n\nreturns: number\n-- Get Item Count From Player Inventory\nFramework.GetItemCount(source, 'water_bottle')\n\n-- Get Item Count From Stash\nFramework.GetItemCount('mystash', 'water_bottle')","hasitem#HasItem":"Check if a player or a stash has an item\nFramework.HasItem(inventory, items, count, metadata)\n\ninventory: number | string\nitems: string | string[] | table<string, number>\ncount?: number\nmetadata?: table\n\nreturns: booleanCheck if inventory has item\n-- Player\nFramework.HasItem(source, 'water_bottle', 1)\n\n-- Stash\nFramework.HasItem('mystash', 'water_bottle', 1)\nCheck if inventory has item with metadata\n-- Player\nFramework.HasItem(source, 'water_bottle', 1, { quality = 100 })\n\n-- Stash\nFramework.HasItem('mystash', 'water_bottle', 1, { quality = 100 })\nCheck if inventory has multiple items\n-- Player\nFramework.HasItem(source, {'water_bottle', 'burger' }, 1)\n\n-- Stash\nFramework.HasItem('mystash', {'water_bottle', 'burger' }, 1)\nCheck if inventory has multiple with different quantity\n-- Player\nFramework.HasItem(source, {['water_bottle'] = 1, ['burger'] = 2})\n\n-- Stash\nFramework.HasItem('mystash', {['water_bottle'] = 1, ['burger'] = 2})","getitemmetadata#GetItemMetadata":"Get Item Metadata\nFramework.GetItemMetadata(inventory, slot)\n\ninventory: number | string\nslot: number\n\nreturns: table\n-- Player\nFramework.GetItemMetadata(source, 1)\n\n-- Stash\nFramework.GetItemMetadata('mystash', 1)","setitemmetadata#SetItemMetadata":"Set Item Metadata\nFramework.SetItemMetadata(inventory, slot, metadata)\n\ninventory: number | string\nslot: number\nmetadata: table\n\n\n-- Player\nFramework.SetItemMetadata(source, 1, { quality = 100 })\n\n-- Stash\nFramework.SetItemMetadata('mystash', 1, { quality = 100 })","getinventory#GetInventory":"Returns Inventory\nFramework.GetInventory(inventory)\n\ninventory: number | string\n\nreturns: Item[]\n-- Player\nFramework.GetInventory(source)\n\n-- Stash\nFramework.GetInventory('mystash')","clearinventory#ClearInventory":"Clear Inventory\nFramework.ClearInventory(inventory, keep)\n\ninventory: number | string\nkeep: string | string[]\n\n\n-- Player\nFramework.ClearInventory(source)\n\nFramework.ClearInventory(source, 'water_bottle')\n\nFramework.ClearInventory(source, { 'water_bottle', 'tosti' })\n\n-- Stash\nFramework.ClearInventory('mystash')\n\nFramework.ClearInventory('mystash', 'water_bottle')\n\nFramework.ClearInventory('mystash', { 'water_bottle', 'tosti' })","registerstash#RegisterStash":"Register Stash\nFramework.RegisterStash(name, slots, weight, owner, groups)\n\nname: string\nslots: number\nweight: number\nowner?: string | boolean\ngroups?: table\n\nRegister stash without owner or groups\nFramework.RegisterStash('mystash', 10, 5000)\nRegister stash unique to each player\nFramework.RegisterStash('mystash', 10, 5000, true)\nRegister stash with player as the owner\nFramework.RegisterStash('mystash', 10, 5000, 'ZWZ34061')\nRegister stash with groups\nFramework.RegisterStash('mystash', 10, 5000, nil, { ['police'] = 0, ['ambulance'] = 0 })\n\nFramework.RegisterStash('mystash', 10, 5000, nil, { ['mygang'] = 0 })","registershop#RegisterShop":"Register Shop\nFramework.RegisterShop(name, data)\n\nname: string\ndata: table\nname: string\nitems: table[]\nname: string\nprice: number\ncount?: number\nmetadata?: table\n\n\ngroups?: string | string[] | table<string, number>\n\n\n\n\nFramework.RegisterShop('myshop', {\nname = 'My Shop',\nitems = {\n{ name = 'water_bottle', price = 10, count = 99, metadata = { quality = 50 }}\n},\ngroups = {\npolice = 0,\nmygang = 0\n}\n})","confiscateinventory#ConfiscateInventory":"Clears a players inventory and saves it to return later\nFramework.ConfiscateInventory(source)\n\nsource: number","returninventory#ReturnInventory":"Returns players confiscated inventory\nFramework.ReturnInventory(source)\n\nsource: number"}},"/bridge/target":{"title":"Target","data":{"":"","disabletarget#DisableTarget":"Disables target\nTarget.DisableTarget(state)\n\nstate : boolean","addglobalobject#AddGlobalObject":"Create Global Object Target\nTarget.AddGlobalObject(options)\n\noptions : Options[]","removeglobalobject#RemoveGlobalObject":"Remove Global Object Target\nTarget.RemoveGlobalObject(labels)\n\nlabels : string | string[]","addglobalped#AddGlobalPed":"Create Global Ped Target\nTarget.AddGlobalPed(options)\n\noptions : Options[]","removeglobalped#RemoveGlobalPed":"Remove Global Ped Target\nTarget.RemoveGlobalPed(labels)\n\nlabels : string | string[]","addglobalplayer#AddGlobalPlayer":"Create Global Player Target\nTarget.AddGlobalPlayer(options)\n\noptions : Options[]","removeglobalplayer#RemoveGlobalPlayer":"Remove Global Player Target\nTarget.RemoveGlobalPlayer(labels)\n\nlabels : string | string[]","addglobalvehicle#AddGlobalVehicle":"Create Global Vehicle Target\nTarget.AddGlobalVehicle(options)\n\noptions : Options[]","removeglobalvehicle#RemoveGlobalVehicle":"Remove Global Vehicle Target\nTarget.RemoveGlobalVehicle(labels)\n\nlabels : string | string[]","addmodel#AddModel":"Create Model Target\nTarget.AddModel(models, options)\n\nmodels : number | string | table<number | string>\noptions : Options[]","removemodel#RemoveModel":"Remove Model Target\nTarget.RemoveModel(models, labels)\n\nmodels : number | string | table<number | string>\nlabels : string | string[]","addentity#AddEntity":"Create Entity Target\nTarget.AddEntity(entities, options)\n\nentities : number | table\noptions : Options[]","removeentity#RemoveEntity":"Remove Entity Target\nTarget.RemoveEntity(entities, labels)\n\nentities : number | table\nlabels : string | string[]","addbone#AddBone":"Create Bone Target\nTarget.AddBone(bones, options)\n\nbones : string | table\noptions : Options[]","removebone#RemoveBone":"Remove Bone Target\nTarget.RemoveBone(bones, labels)\n\nbones : string | table\nlabels : string | string[]","removezone#RemoveZone":"Removes a target zone\nTarget.RemoveZone(id)\n\nid : number | string"}},"/bridge/target/boxzone":{"title":"Target BoxZone","data":{"":"Creates Targetable BoxZone.\nTarget.AddBoxZone(data)\n\ndata: table\ndebug?: boolean\nname: string\ncoords: vector3\nsize: vector3\nrotation: number\noptions: Options[]\n\n\n\nreturns: number | string\nTarget.AddBoxZone({\nname = 'MyBoxZone',\ncoords = vector3(0, 0, 0),\nsize = vector3(1, 1, 1),\nrotation = 0,\ndebug = true,\noptions = {}\n})"}},"/bridge/target/options":{"title":"Target Options","data":{"":"label string\nicon? string\ndistance? number\njob? string | string[] | table<string, number>\ngang? string | string[] | table<string, number>\nitems? string | string[] | table<string, number>\ncanInteract function(entity?: number): boolean?\nonSelect? function(data: {entity: number})\nexport? string\nevent? string\nserverEvent? string\ncommand? string"}},"/bridge/target/polyzone":{"title":"Target PolyZone","data":{"":"Creates Targetable PolyZone.\nTarget.AddPolyZone(data)\n\ndata: table\ndebug?: boolean\nname: string\nheight?: number\npoints: vector3[]\noptions: Options[]\n\n\n\nreturns: number | string\nTarget.AddPolyZone({\nname = 'MyPolyZone',\npoints = {\nvector3(0, 0, 0),\nvector3(0, 0, 0),\nvector3(0, 0, 0),\nvector3(0, 0, 0)\n},\nheight = 1,\ndebug = true,\noptions = {}\n})"}},"/bridge/target/spherezone":{"title":"Target SphereZone","data":{"":"Creates Targetable SphereZone.\nTarget.AddSphereZone(data)\n\ndata: table\ndebug?: boolean\nname: string\ncoords: vector3\nradius: number\noptions: Options[]\n\n\n\nreturns: number | string\nTarget.AddSphereZone({\nname = 'MySphereZone',\ncoords = vector3(0, 0, 0),\nradius = 1,\ndebug = true,\noptions = {}\n})"}},"/bridge/utilities/client":{"title":"Framework Utilities","data":{"":"","loadmodel#LoadModel":"Load a model when called from a thread it will yield until loaded\nFramework.LoadModel(model)\n\nmodel: number | string","loadanimdict#LoadAnimDict":"Load a animation dictionary when called from a thread it will yield until loaded\nFramework.LoadAnimDict(animDict)\n\nanimDict: string","loadanimset#LoadAnimSet":"Load a animation clipset when called from a thread it will yield until loaded\nFramework.LoadAnimSet(animSet)\n\nanimSet: string","loadambientaudiobank#LoadAmbientAudioBank":"Load a ambient audio bank when called from a thread it will yield until loaded\nFramework.LoadAmbientAudioBank(bank)\n\nbank: string","loadmissionaudiobank#LoadMissionAudioBank":"Load a mission audio bank when called from a thread it will yield until loaded\nFramework.LoadMissionAudioBank(bank)\n\nbank: string","loadscriptaudiobank#LoadScriptAudioBank":"Load a script audio bank when called from a thread it will yield until loaded\nFramework.LoadScriptAudioBank(bank)\n\nbank: string","getpeds#GetPeds":"Get the Game Ped Pool\nFramework.GetPeds()\nreturns: [handlers: number]","getobjects#GetObjects":"Get the Game Object Pool\nFramework.GetObjects()\nreturns: [handlers: number]","getvehicles#GetVehicles":"Get the Game Vehicle Pool\nFramework.GetVehicles()\nreturns: [handlers: number]","getpickups#GetPickups":"Get the Game Pickup Pool\nFramework.GetPickups()\nreturns: [handlers: number]","getclosestped#GetClosestPed":"Get the ped and coords closest to set coords and distance\nFramework.GetClosestPed(coords, distance)\n\ncoords: vector3\ndistance?: number\n\nreturns:\nped?: number\ncoords?: vector3","getclosestplayer#GetClosestPlayer":"Get the player, ped and coords closest to set coords and distance\nFramework.GetClosestPlayer(coords, distance, includeLocal)\n\ncoords: vector3\ndistance?: number\nincludeLocal?: boolean\n\nreturns:\nplayer?: number\nped?: number\ncoords?: vector3","getclosestobject#GetClosestObject":"Get the object and coords closest to set coords and distance\nFramework.GetClosestObject(coords, distance)\n\ncoords: vector3\ndistance?: number\n\nreturns:\nobject?: number\ncoords?: vector3","getclosestvehicle#GetClosestVehicle":"Get the vehicle and coords closest to set coords and distance\nFramework.GetClosestVehicle(coords, distance, includeLocal)\n\ncoords: vector3\ndistance?: number\nincludeLocal?: boolean\n\nreturns:\nvehicle?: number\ncoords?: vector3","getclosestpickup#GetClosestPickup":"Get the pickup and coords closest to set coords and distance\nFramework.GetClosestPickup(coords, distance)\n\ncoords: vector3\ndistance?: number\n\nreturns:\npickup?: number\ncoords?: vector3","getnearbypeds#GetNearbyPeds":"Get all peds and coords in range of set coords and distance\nFramework.GetNearbyPeds(coords, distance)\n\ncoords: vector3\ndistance?: number\n\nreturns: { ped: number, coords: vector3 }[]","getnearbyplayers#GetNearbyPlayers":"Get all players, peds and coords in range of set coords and distance\nFramework.GetNearbyPlayers(coords, distance, includeLocal)\n\ncoords: vector3\ndistance?: number\nincludeLocal?: boolean\n\nreturns: { id: number, ped: number, coords: vector3 }[]","getnearbyobjects#GetNearbyObjects":"Get all objects and coords in range of set coords and distance\nFramework.GetNearbyObjects(coords, distance)\n\ncoords: vector3\ndistance?: number\n\nreturns: { object: number, coords: vector3 }[]","getnearbyvehicles#GetNearbyVehicles":"Get all vehicles and coords in range of set coords and distance\nFramework.GetNearbyVehicles(coords, distance, includeLocal)\n\ncoords: vector3\ndistance?: number\nincludeLocal?: boolean\n\nreturns: { vehicle: number, coords: vector3 }[]","getnearbypickups#GetNearbyPickups":"Get all pickups and coords in range of set coords and distance\nFramework.GetNearbyPickups(coords, distance)\n\ncoords: vector3\ndistance?: number\n\nreturns: { pickup: number, coords: vector3 }[]","progressbar#ProgressBar":"Displays a running progress bar\nFramework.ProgressBar(data)\n\ndata: table\nduration: number\nlabel: string\ncanCancel?: boolean\nuseWhileDead?: boolean\nanim?: table\ndict?: string\nclip?: string\nflag?: number\nscenario?: string\n\n\ndisable?: table\nmove?: boolean\nvehicle?: boolean\ncombat?: boolean\nmouse?: boolean\n\n\nprops?: (object or array)\nmodel: string\nbone?: number\npos: vector3\nrot: vector3\n\n\nonFinish?: function()\nonCancel?: function()","networkrequestcontrolofnetworkid#NetworkRequestControlOfNetworkId":"Not Recommended Unless You Absolutely Need It\nRequest network control of network id\nFramework.NetworkRequestControlOfNetworkId(netid)\n\nnetid: number","networkrequestcontrolofentity#NetworkRequestControlOfEntity":"Not Recommended Unless You Absolutely Need It\nRequest network control of entity\nFramework.NetworkRequestControlOfEntity(entity)\n\nentity: number","networkrequestcontrolofdoor#NetworkRequestControlOfDoor":"Not Recommended Unless You Absolutely Need It\nRequest network control of door\nFramework.NetworkRequestControlOfDoor(door)\n\ndoor: number"}},"/bridge/utilities/server":{"title":"Server","data":{"":""}},"/bridge/utilities/shared":{"title":"Framework Utilities","data":{"":"","round#Round":"Round Number To Decimal\nFramework.Round(value, decimals)\n\nvalue: number\ndecimals: numbers\n\nreturns: number","firsttoupper#FirstToUpper":"Set First Character to uppercase\nFramework.FirstToUpper(str)\n\nstr: string\n\nreturns: string"}},"/bridge/zone/boxzone":{"title":"Zone BoxZone","data":{"":"Creates BoxZone\nZone.BoxZone(data)\n\ndata: table\ndebug?: boolean\ncoords: vector3\nsize?: vector3\nDefault: vector3(4, 4, 4)\n\n\nrotation?: number\nonEnter: function(self: CZone)\nonExit: function(self: CZone)\ninside: function(self: CZone)\n\n\n\nreturns: CZone"}},"/bridge/zone/czone":{"title":"Zone CZone","data":{"":"","id#id":"Zone Idreturns: number\nlocal zone = Zone.PolyZone({ ... })\n\nzone.id","coords#coords":"Zone Coordsreturns: vector3\nlocal zone = Zone.PolyZone({ ... })\n\nzone.coords()","distance#distance":"Zone Distancereturns: number\nlocal zone = Zone.PolyZone({ ... })\n\n-- Updates depending on player position\nzone.distance()","remove#remove":"Remove the zone\nlocal zone = Zone.PolyZone({ ... })\n\nzone.remove()","contains#contains":"Check if a vector3 is inside the zonereturns: boolean\nlocal zone = Zone.PolyZone({ ... })\n\nzone.contains(vector3(0, 0, 0))","onenter#onEnter":"Called when the player enters the zone\nZone.PolyZone({\npoints = {\nvec(413.8, -1026.1, 29),\nvec(411.6, -1023.1, 29),\nvec(412.2, -1018.0, 29),\nvec(417.2, -1016.3, 29),\nvec(422.3, -1020.0, 29),\nvec(426.8, -1015.9, 29),\nvec(431.8, -1013.0, 29),\nvec(437.3, -1018.4, 29),\nvec(432.4, -1027.2, 29),\nvec(424.7, -1023.5, 29),\nvec(420.0, -1030.2, 29),\nvec(409.8, -1028.4, 29),\n},\nheight = 2,\ndebug = true,\nonEnter = function(data)\nprint('Player Just Entered Zone' .. data.id)\nend\n})","onexit#onExit":"Called when the player leaves the zone\nZone.PolyZone({\npoints = {\nvec(413.8, -1026.1, 29),\nvec(411.6, -1023.1, 29),\nvec(412.2, -1018.0, 29),\nvec(417.2, -1016.3, 29),\nvec(422.3, -1020.0, 29),\nvec(426.8, -1015.9, 29),\nvec(431.8, -1013.0, 29),\nvec(437.3, -1018.4, 29),\nvec(432.4, -1027.2, 29),\nvec(424.7, -1023.5, 29),\nvec(420.0, -1030.2, 29),\nvec(409.8, -1028.4, 29),\n},\nheight = 2,\ndebug = true,\nonExit = function(data)\nprint('Player Just Left Zone ' .. data.id)\nend\n})","inside#inside":"Called as long as the player is inside the zone\nZone.PolyZone({\npoints = {\nvec(413.8, -1026.1, 29),\nvec(411.6, -1023.1, 29),\nvec(412.2, -1018.0, 29),\nvec(417.2, -1016.3, 29),\nvec(422.3, -1020.0, 29),\nvec(426.8, -1015.9, 29),\nvec(431.8, -1013.0, 29),\nvec(437.3, -1018.4, 29),\nvec(432.4, -1027.2, 29),\nvec(424.7, -1023.5, 29),\nvec(420.0, -1030.2, 29),\nvec(409.8, -1028.4, 29),\n},\nheight = 2,\ndebug = true,\ninside = function(data)\nprint('Player Is Inside Zone ' .. data.id)\nend\n})"}},"/bridge/zone/polyzone":{"title":"Zone PolyZone","data":{"":"Creates PolyZone\nZone.PolyZone(data)\n\ndata: table\ndebug?: boolean\nheight?: number\nDefault: 4\n\n\npoints: vector3[]\nonEnter: function(self: CZone)\nonExit: function(self: CZone)\ninside: function(self: CZone)\n\n\n\nreturns: CZone"}},"/bridge/zone/spherezone":{"title":"Zone SphereZone","data":{"":"Creates SphereZone.\nZone.SphereZone(data)\n\ndata: table\ndebug?: boolean\ncoords: vector3\nradius?: number\nDefault: 2\n\n\nonEnter: function(self: CZone)\nonExit: function(self: CZone)\ninside: function(self: CZone)\n\n\n\nreturns: CZone"}},"/free/sd-keypad":{"title":"SD-KeyPad","data":{"":"Safe keypad that was created for Store Robbery but decided to separate it and release the keypad for free.","example#Example":"Always verify the code using a callback to the server to prevent altering\n\nlocal confirmed, code = exports['sd-keypad']:OpenKeyPad()\nif confirmed then\nif code == '1234' then\nexports['sd-keypad']:Accept()\nelse\nexports['sd-keypad']:Reject()\nend\nend","openkeypad#OpenKeyPad":"Open the keypad UI\nexports['sd-keypad']:OpenKeyPad()\nreturns: boolean, string\nlocal confirmed, code = exports['sd-keypad']:OpenKeyPad()","closekeypad#CloseKeyPad":"Force Close Key Pad\nexports['sd-keypad']:CloseKeyPad()","accept#Accept":"Accept Code\nexports['sd-keypad']:Accept()","reject#Reject":"Reject Code\nexports['sd-keypad']:Reject()"}},"/free/sd-menu":{"title":"SD-Menu","data":{"":"SD-Menu is Developer Tool for FiveM that allows you to support multiple menus and inputs using a single export and also adds Font Awesome support to menu's without code changes.","supported-menus--inputs#Supported Menus & Inputs":"Menu\tSupported\tInput\tSupported\tnh-context v1\t\tnh-keyboard v1\t\tnh-context v2\t\tnh-keyboard v2\t\tzf_context\t\tzf_dialog\t\tqb-menu\t\tqb-input\t\tox_lib\t\tox_lib","library-in-your-resource#Library (In Your Resource)":"You can inlude sd-menu in your resource without having to depend on another resource, simply add sd-menu.lua to your resource and include it in your fxmanifest.lua on the client side.\nclient_scripts {\n'client/sd-menu.lua'\n}","resource#Resource":"You can also run sd-menu as standalone resource by downloading the github releaseYou can then use the exports as followed.\n-- Menu\nexports['sd-menu']:CreateMenu(data)\n\n-- Input\nexports['sd-menu']:CreateInput(data)"}},"/free/sd-menu/config":{"title":"Config File","data":{"":"The following Config Options are mapped by default","auto-detect#Auto Detect":"Auto Detect will find what Menu & Input you are running, Default: false [Optional]\nConfig.SDAutoVersion = true","menu-version#Menu Version":"Set the Menu Version required if you are not using Auto Detect\noption\tresource\tv1\tnh-context v1\tv2\tnh-context v2\tzf\tzf_context\tqb\tqb-menu\tox\tox_lib\n\nConfig.SDMenuVersion = 'ox'","input-version#Input Version":"Set the Input Version required if you are not using Auto Detect\noption\tresource\tv1\tnh-keyboard v1\tv2\tnh-keyboard v2\tzf\tzf_dialog\tqb\tqb-input\tox\tox_lib\n\nConfig.SDInputVersion = 'ox'"}},"/free/sd-menu/input":{"title":"Input","data":{"":"","options#Options":"header: string\nSet Header Text\n\n\ninputs: table\ntext: string\nSet Description Text","example#Example":"local input, input1, input2 = exports['Your-Resource-Name']:CreateInput({\nheader = 'Header Text',\ninputs = {\n{\ntext = 'Input 1'\n},\n{\ntext = 'Input 2'\n}\n}\n})\n\nif input then -- Confirm Input Submit\nprint(input1, input2)\nend"}},"/free/sd-menu/menu":{"title":"Menu","data":{"":"","options#Options":"disabled: boolean\nSet Option Disabled (Doesn't Work On All Menus)\n\n\nheader: string\nSet Header Text\n\n\ntxt: string\nSet Description Text\n\n\nicon: string\nSet FontAwesome Icon\n\n\nparams: table\nserver: boolean\nIs Server Event\n\n\nevent: string\nSet Trigger Event\n\n\nargs: any\nSet Arguments","example#Example":"exports['Your-Resource-Name']:CreateMenu({\n{\ndisabled = true,\nheader = \"Header Text\",\nicon = \"fa-solid fa-question\",\n},\n{\ndisabled = true,\nheader = \"Header Text\",\nicon = \"fa-solid fa-question\",\ntxt = \"Description Text\",\nparams = {\nserver = true,\nevent = \"your-event\",\nargs = {\n'MyFirstArg',\n'MySecondArg',\ntrue\n}\n}\n},\n})\n\nRegisterNetEvent('your-event', function(arg1, arg2, arg3)\nprint(arg1, arg2, arg3)\n-- Result:  MyFirstArg  MySecondArg true\nend)"}},"/free/sd-paycheck":{"title":"SD-Paycheck","data":{"":"Simple Resource to add Paycheck System to your Server without all the hassle.","features#Features":"Use Ped Or BoxZone\nPay Paycheck In Cash Or Bank\nSet Paycheck Collection to a specific day of the week","install#Install":"To intercept the framework paycheck system we have to make the following changes:\n\n\nOpen qb-core/server/functions.lua\nSearch for PaycheckInterval()\nReplace the highlighted Player.Functions.AddMoney('bank', payment, 'paycheck'){:lua}\nReplace with TriggerEvent('sd-paycheck:server:AddPaycheck', payment, Player.PlayerData.source){:lua}\n\n\nfunction PaycheckInterval()\nif next(QBCore.Players) then\nfor _, Player in pairs(QBCore.Players) do\nif Player then\nlocal payment = QBShared.Jobs[Player.PlayerData.job.name]['grades'][tostring(Player.PlayerData.job.grade.level)].payment\nif not payment then payment = Player.PlayerData.job.payment end\nif Player.PlayerData.job and payment > 0 and (QBShared.Jobs[Player.PlayerData.job.name].offDutyPay or Player.PlayerData.job.onduty) then\nif QBCore.Config.Money.PayCheckSociety then\nlocal account = exports['qb-management']:GetAccount(Player.PlayerData.job.name)\nif account ~= 0 then -- Checks if player is employed by a society\nif account < payment then -- Checks if company has enough money to pay society\nTriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('error.company_too_poor'), 'error')\nelse\nPlayer.Functions.AddMoney('bank', payment, 'paycheck')\nexports['qb-management']:RemoveMoney(Player.PlayerData.job.name, payment)\nTriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('info.received_paycheck', {value = payment}))\nend\nelse\nPlayer.Functions.AddMoney('bank', payment, 'paycheck')\nTriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('info.received_paycheck', {value = payment}))\nend\nelse\nPlayer.Functions.AddMoney('bank', payment, 'paycheck')\nTriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('info.received_paycheck', {value = payment}))\nend\nend\nend\nend\nend\nSetTimeout(QBCore.Config.Money.PayCheckTimeOut * (60 * 1000), PaycheckInterval)\nend\n\n\n\nOpen es_extended/server/paycheck.lua\nSearch for StartPayCheck()\nReplace the highlighted xPlayer.addAccountMoney('bank', salary, \"Paycheck\"){:lua} and xPlayer.addAccountMoney('bank', salary, \"Welfare Check\"){:lua}\nReplace with TriggerEvent('sd-paycheck:server:AddPaycheck', salary, xPlayer.source){:lua}\n\n\nfunction StartPayCheck()\nCreateThread(function()\nwhile true do\nWait(Config.PaycheckInterval)\nfor player, xPlayer in pairs(ESX.Players) do\nlocal jobLabel = xPlayer.job.label\nlocal job = xPlayer.job.grade_name\nlocal salary = xPlayer.job.grade_salary\n\nif salary > 0 then\nif job == 'unemployed' then -- unemployed\nxPlayer.addAccountMoney('bank', salary, \"Welfare Check\")\nTriggerClientEvent('esx:showAdvancedNotification', player, TranslateCap('bank'), TranslateCap('received_paycheck'), TranslateCap('received_help', salary),\n'CHAR_BANK_MAZE', 9)\nif Config.LogPaycheck then\nESX.DiscordLogFields(\"Paycheck\", \"Paycheck - Unemployment Benefits\", \"green\", {\n{ name = \"Player\", value = xPlayer.name,   inline = true },\n{ name = \"ID\",     value = xPlayer.source, inline = true },\n{ name = \"Amount\", value = salary,         inline = true }\n})\nend\nelseif Config.EnableSocietyPayouts then -- possibly a society\nTriggerEvent('esx_society:getSociety', xPlayer.job.name, function(society)\nif society ~= nil then              -- verified society\nTriggerEvent('esx_addonaccount:getSharedAccount', society.account, function(account)\nif account.money >= salary then -- does the society money to pay its employees?\nxPlayer.addAccountMoney('bank', salary, \"Paycheck\")\naccount.removeMoney(salary)\nif Config.LogPaycheck then\nESX.DiscordLogFields(\"Paycheck\", \"Paycheck - \" .. jobLabel, \"green\", {\n{ name = \"Player\", value = xPlayer.name,   inline = true },\n{ name = \"ID\",     value = xPlayer.source, inline = true },\n{ name = \"Amount\", value = salary,         inline = true }\n})\nend\n\nTriggerClientEvent('esx:showAdvancedNotification', player, TranslateCap('bank'), TranslateCap('received_paycheck'),\nTranslateCap('received_salary', salary), 'CHAR_BANK_MAZE', 9)\nelse\nTriggerClientEvent('esx:showAdvancedNotification', player, TranslateCap('bank'), '', TranslateCap('company_nomoney'), 'CHAR_BANK_MAZE', 1)\nend\nend)\nelse -- not a society\nxPlayer.addAccountMoney('bank', salary, \"Paycheck\")\nif Config.LogPaycheck then\nESX.DiscordLogFields(\"Paycheck\", \"Paycheck - \" .. jobLabel, \"green\", {\n{ name = \"Player\", value = xPlayer.name,   inline = true },\n{ name = \"ID\",     value = xPlayer.source, inline = true },\n{ name = \"Amount\", value = salary,         inline = true }\n})\nend\nTriggerClientEvent('esx:showAdvancedNotification', player, TranslateCap('bank'), TranslateCap('received_paycheck'), TranslateCap('received_salary', salary),\n'CHAR_BANK_MAZE', 9)\nend\nend)\nelse -- generic job\nxPlayer.addAccountMoney('bank', salary, \"Paycheck\")\nif Config.LogPaycheck then\nESX.DiscordLogFields(\"Paycheck\", \"Paycheck - Generic\", \"green\", {\n{ name = \"Player\", value = xPlayer.name,   inline = true },\n{ name = \"ID\",     value = xPlayer.source, inline = true },\n{ name = \"Amount\", value = salary,         inline = true }\n})\nend\nTriggerClientEvent('esx:showAdvancedNotification', player, TranslateCap('bank'), TranslateCap('received_paycheck'), TranslateCap('received_salary', salary),\n'CHAR_BANK_MAZE', 9)\nend\nend\nend\nend\nend)\nend","config#Config":"Config = {}\nConfig.Debug = false\nConfig.Target = 'qb-target' -- qb-target / qtarget\n\n-- Pay Paycheck in Cash other wise deposited to bank\nConfig.CashOut = false\n\n-- Collect Paycheck on a specific Day\n-- -1 = Disabled\n--  0 = Sunday\n--  1 = Monday\n--  2 = Tuesday\n--  3 = Wednesday\n--  4 = Thursday\n--  5 = Friday\n--  6 = Saturday\nConfig.PayCheckDay = -1\n\n-- Using Ped\nConfig.UsePed = true\nConfig.Ped = 'ig_lifeinvad_02'\nConfig.PedCoords = vector4(-1078.77, -244.78, 36.76, 163.08)\n\n-- Using BoxZone\nConfig.BoxZone = vector3(-1082.73, -246.56, 37.76)\nConfig.BoxZoneLength = 5\nConfig.BoxZoneWidth = 2\nConfig.BoxZoneHeading = 300\nConfig.BoxZoneMaxZ = 36.76\nConfig.BoxZoneMinZ = 38.76"}},"/free/sd-stashes":{"title":"Index","data":{"":""}},"/":{"title":"About","data":{"":"With 16 Years In Developing ExperienceWe hope to provide high-quality products and services to the FiveM community. We pride ourselves in the quality of all our products and we continue to strive to always provide the highest quality product and support while meeting our customer's expectations and never rush a product out that we are not 100% satisfied with ourselves."}},"/sd-merchants":{"title":"SD-Merchants","data":{"":"Merchants is the successor of Traders & Buyers, with many newly added features, configurations, and custom server-side pathing system, the possibilities are endless."}},"/sd-merchants/guides/merchants":{"title":"Merchants","data":{"":"Merchants are located in the merchants folder, you can create any custom merchant by creating a new lua file and following the guide below.","getting-started#Getting Started":"Create a merchant by creating a new lua file and name it anything you want.merchants/YourMerchantName.lua\nConfig.Merchants['YourMerchantName'] = {\n\n}","merchant-types#Merchant Types":"Creates Wandering Ped\nConfig.Merchants['YourMerchantName'] = {\ntype = \"server\",\n}\n\n\nCreates Static Ped\nConfig.Merchants['YourMerchantName'] = {\ntype = \"client\",\n}\n\n\n\ntype: string\nserver:\nped\n\n\nclient:\nped\nmodel\nzone","ped-server#Ped (Server)":"Merchant Walks The Single Path\nmodel: hash\ncoords: vector3[]\n\n\n['ped'] = {\nmodel = `ped_model`,\ncoords = {\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\n}\n},\n\n\nMerchant Walks Random Path\nmodel: hash\ncoords: table<vector3[]>\n\n\n['ped'] = {\nmodel = `ped_model`,\ncoords = {\n{\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\n},\n{\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\n},\n{\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\nvector3(0.0, 0.0, 0.0),\n}\n}\n},","weapons-server#Weapons (Server)":"You can give the ped merchant a weapon either visible or hidden but only works on server ped\nvisible?: boolean\nmodel: hash\naccuracy: number\narmor?: number\n\n\n['weapon'] = {\nvisible = true,\nmodel = `weapon_model`,\naccuracy = 100,\narmor = 100,\n},","ped-client#Ped (Client)":"Static Merchant\nmodel: hash\ncoords: vector4[]\nscenario?: string\nanimation?: table\nname: string\ndictionary: string\n\n\n\n\n['ped'] = {\nmodel = `ped_model`,\ncoords = vector4(0.0, 0.0, 0.0, 0.0),\nscenario = 'scenario_name',\nanimation = { name = 'animation_name', dictionary = 'animation_dictionary' }\n},\n\n\nStatic Merchant At Random Location\nmodel: hash\ncoords: vector4[]\nscenario?: string\nanimation?: table\nname: string\ndictionary: string\n\n\n\n\n['ped'] = {\nmodel = `ped_model`,\ncoords = {\nvector4(0.0, 0.0, 0.0, 0.0),\nvector4(0.0, 0.0, 0.0, 0.0),\nvector4(0.0, 0.0, 0.0, 0.0),\nvector4(0.0, 0.0, 0.0, 0.0),\n},\nscenario = 'scenario_name',\nanimation = { name = 'animation_name', dictionary = 'animation_dictionary' }\n},","zone-client#Zone (Client)":"BoxZone Target\ncoords: vector4\nlength: number\nwidth: number\nminZ: number\nmaxZ: number\n\n\n['zone'] = {\ncoords = vector4(0.0, 0.0, 0.0, 0.0),\nlength = 0,\nwidth = 0,\nminZ = 0.0,\nmaxZ = 0.0,\n},\n\n\nPolyZone Target\ncoords: vector2[]\nminZ: number\nmaxZ: `number\n\n\n['zone'] = {\ncoords = {\nvector2(0.0, 0.0),\n},\nminZ = 0.0,\nmaxZ = 0.0,\n},","shop-types#Shop Types":"Check out Shop for more details","blips#Blips":"Check out Blips for more details"}},"/sd-merchants/guides/paths":{"title":"Paths","data":{"":""}},"/sd-merchants/merchants/blips":{"title":"Blips","data":{"":""}},"/sd-merchants/merchants/config":{"title":"Config","data":{"":"","config#Config":"","cl_configlua#cl_config.lua":"You can change the Scroll from x to y to make the UI scroll on the Y axis\n-- ❗ CLIENT NOTIFICATION ❗\nConfig.Notification = function(title, message, type, time)\nFramework.Notify(message, type, time)\nend\n\n-- ❗ MERCHANT UI SCROLL ❗\nConfig.Scroll = 'x'","sh_configlua#sh_config.lua":"Target Interaction Only Load On Spawn\n\nYou can Turn On Debug To Preload Targets Without Having To Spawn Each Time, Make Sure To Turn It Off When Done.\n\nConfig = {}\n\n-- ❗ MERCHANT DEBUG ❗\nConfig.Debug = true\n\n-- ❗ MERCHANT PATH DEBUG ❗\nConfig.PathDebug = false\n\n-- ❗ MERCHANT CREATION TOOL ❗\nConfig.CreationTool = true\n\n-- ❗ INVENTORY PATH FOR IMAGES ❗\nConfig.Inventory = 'qb-inventory/html/images/'\n\n-- ⚠️ DON'T TOUCH ⚠️\nConfig.Merchants = {}","sv_configlua#sv_config.lua":"-- ⚠️ DON'T TOUCH ⚠️\nConfig.Currencies = {}\n\n-- ❗ EXAMPLE MERCHANTS ❗\nConfig.Examples = true\n\n-- ❗ SERVER NOTIFICATION ❗\nConfig.Notification = function(src, title, message, type, time)\nFramework.Notify(src, message, type, time)\nend\n\n-- ❗ DISCORD WEBHOOK LOGGING ❗\nConfig.Discord = {\n['open'] = '',\n['buy'] = '',\n['sell'] = '',\n['market_buy'] = '',\n['market_sell'] = '',\n['market_collect'] = '',\n}","sv_currencieslua#sv_currencies.lua":"You can add any custom currencies you like\n-- ❗ CURRENCY: CASH ❗\nConfig.Currencies['cash'] = {\nlabel = '${amount}',\ncheck = function(src, data)\nlocal Player = Framework.GetPlayer(src)\nlocal cash = Player.GetMoney('cash')\nreturn cash >= data.amount\nend,\nremove = function(src, data)\nlocal Player = Framework.GetPlayer(src)\nreturn Player.RemoveMoney('cash', data.amount)\nend,\nadd = function(src, data)\nlocal Player = Framework.GetPlayer(src)\nreturn Player.AddMoney('cash', data.amount)\nend,\n}\n\n-- ❗ CURRENCY: BANK ❗\nConfig.Currencies['bank'] = {\nlabel = '${amount}',\ncheck = function(src, data)\nlocal Player = Framework.GetPlayer(src)\nlocal bank = Player.GetMoney('bank')\nreturn bank >= data.amount\nend,\nremove = function(src, data)\nlocal Player = Framework.GetPlayer(src)\nreturn Player.RemoveMoney('bank', data.amount)\nend,\nadd = function(src, data)\nlocal Player = Framework.GetPlayer(src)\nreturn Player.AddMoney('bank', data.amount)\nend,\n}\n\n-- ❗ CURRENCY: ITEM ❗\nConfig.Currencies['item'] = {\nlabel = '{amount}x {item}',\ncheck = function(src, data)\nreturn Framework.GetItemCount(src, data.item) >= data.amount\nend,\nremove = function(src, data)\nreturn Framework.RemoveItem(src, data.item, data.amount)\nend,\nadd = function(src, data)\nreturn Framework.AddItem(src, data.item, data.amount)\nend,\n}"}},"/sd-merchants/merchants/items":{"title":"Items","data":{"":""}},"/sd-merchants/merchants/shop":{"title":"Shop","data":{"":"","type#Type":"The type of shop you want to use, you can choose one of the following options","market#Market":"Market is a shop where players can list there items for sale and other players can buy it.","buy#Buy":"Buy is a shop where you can list items for sale that a player can purchase.","sell#Sell":"Sell is a shop where players can sell items to the merchants that are listed in the Items","options#Options":"","type-1#Type":"The type of shop market, buy, sell","title#Title":"The title of the shop","collect#Collect":"Make players collect the currency when sold or when right away (Market Only)","empty#Empty":"Allow players to see empty shop even when no items are in stock","random-item-amount#Random Item Amount":"Random item amount needs to be lower then the amount of items you have configured as it will select items until it reached the configured amount\nSelect a random amount of items to put in the shop","requirement#Requirement":"","currency#Currency":"The currency to use for the required currency to open the shop","item#Item":"Item name when using item currency","amount#Amount":"The amount needed","remove#Remove":"Remove the currency when opening the shop","close-after-transaction#Close After Transaction":"Close the shop after a single transaction has been made","example#Example":"type: string\ntitle: title\ncollect?: boolean\nempty?: boolean\nrandom_item_amount?: number\nrequirement?: table\ncurrency : string\nitem: string\namount: number\nremove: boolean\n\n\nclose_after_transaction?: boolean\n\n\n['shop'] = {\ntype = \"market\",\ntitle = \"Shop Title\",\ncollect = false,\nempty = false,\nrandom_item_amount = 1,\nrequirement = {\ncurrency = \"currency\",\nitem = \"item_name\",\namount = 1,\nremove = false,\n},\nclose_after_transaction = false\n}"}},"/sd-notify":{"title":"SD-Notify","data":{"":"Next Generation Notification System","notify#Notify":"Simple Notification\n\n\nexports['sd-notify']:Notify(title, message, time, type, position, hideprogressbar, sound)\n\n\n\nTriggerClientEvent('sd-notify:Notify', source, title, message, time, type, position, hideprogressbar, sound)\n\n\n\ntitle: string\nmessage: string\ntime: number\ntype: Types\nposition?: Position\nhideprogressbar?: boolean\nsound?: boolean\n\nreturns: string","promise#Promise":"Notification That Can Be Updated\n\n\nexports['sd-notify']:Promise(title, message, type, position, sound)\n\n\n\ntitle: string\nmessage: string\ntype: Types\nposition?: Position\nsound?: boolean\n\nreturns: string","update#Update":"Update A Promise Notification\n\n\nexports['sd-notify']:Update(id, title, message, time, type, position, hideprogressbar, sound)\n\n\n\ntitle: string\nmessage: string\ntime: number\ntype: Types\nposition?: Position\nhideprogressbar?: boolean\nsound?: boolean\n\nreturns: string","remove-all#Remove All":"Remove All Notifications On Screen\n\n\nexports['sd-notify']:RemoveAll()","remove#Remove":"Remove An Specific Notification\n\n\nexports['sd-notify']:Remove(id)\n\n\n\nid: string"}},"/sd-notify/config":{"title":"Config","data":{"":"-- Enable Notifcation Sound\nConfig.EnableNotifcationSound = true\n\n-- Set Notifcation Sound Volume (1.0 = 100% / 0.0 = 0%)\nConfig.NotifcationSoundVolume = 1.0\n\n-- Enable Promise Sound\nConfig.EnablePromiseSound = true\n\n-- Set Promise Sound Volume (1.0 = 100% / 0.0 = 0%)\nConfig.PromiseSoundVolume = 1.0\n\n-- top-left | top-right | top-center | bottom-left | bottom-right | bottom-center | right-center | left-center\nConfig.DefaultPosition = 'right-center'\n\n-- bounce | slide | zoom | flip\nConfig.Transition = 'bounce'\n\n-- light | dark | colored | custom\nConfig.Theme = 'dark'\n\n-- Hide ProgressBar\nConfig.HideProgressBar = false\n\n-- Notification Limits\nConfig.NotifcationLimit = 5\n\n-- Add Custom Types\nConfig.Notifcations = {\n['primary'] = {\nicon = 'fa-solid fa-comment fa-lg',\ncolor = '#87838a',\ntype = 'info',\n},\n['info'] = {\nicon = 'fa-solid fa-circle-info fa-lg',\ncolor = '#59C2DA',\ntype = 'info',\n},\n['success'] = {\nicon = 'fa-solid fa-circle-check fa-lg',\ncolor = '#58D96E',\ntype = 'success',\n},\n['error'] = {\nicon = 'fa-solid fa-circle-xmark fa-lg',\ncolor = '#E64A63',\ntype = 'error',\n},\n['warning'] = {\nicon = 'fa-solid fa-triangle-exclamation fa-lg',\ncolor = '#f1c40f',\ntype = 'warning',\n},\n['phone'] = {\nicon = 'fa-solid fa-phone fa-lg',\ncolor = '#ebae34',\ntype = 'default',\n},\n['announce'] = {\nicon = 'fa-solid fa-bullhorn',\ncolor = '#f1c40f',\ntype = 'warning',\n},\n}"}},"/sd-notify/framework":{"title":"Framework","data":{"":"Open qb-core/client/functions.lua\nSearch for QBCore.Functions.Notify\nReplace with the code below.\n\n\nfunction QBCore.Functions.Notify(text, texttype, length)\nif type(text) == \"table\" then\nlocal ttext = text.text or 'Placeholder'\nlocal caption = text.caption or 'Placeholder'\ntexttype = texttype or 'primary'\nlength = length or 5000\nexports['sd-notify']:Notify(caption, ttext, length, texttype)\nelse\ntexttype = texttype or 'primary'\nlength = length or 5000\nexports['sd-notify']:Notify('', text, length, texttype)\nend\nend\n\n\n\nOpen es_extended/client/functions.lua\nSearch for ESX.ShowNotification\nReplace with the code below.\n\n\nfunction ESX.ShowNotification(message, texttype, length)\nif type(texttype) ~= \"string\" then texttype = 'info' end\nlength = length or 5000\nexports['sd-notify']:Notify('', message, length, texttype)\nend"}},"/sd-notify/positions":{"title":"Notify Positions","data":{"":"The default position can be configured in the Config\n\n\n\ntop-left\ntop-right\ntop-center\nbottom-left\nbottom-right\nbottom-center\nright-center\nleft-center"}},"/sd-notify/types":{"title":"Notify Types","data":{"":"You can create custom types in the Config","default-types#Default Types":"This are the types setup by default\nprimary\ninfo\nsuccess\nerror\nwarning\nphone\nannounce"}},"/unit":{"title":"Unit","data":{"":""}}}